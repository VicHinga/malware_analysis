Areas Covered:

    1. What is malware analysis
    2. Set up an environment
    3. Static Analysis
    4. Assembly Language
    5. Code Analysis
    6. Dynamic Analysis
    7. Behavioral Analysis

------------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++
1. What is malware analysis:
++++++++++++++++++++++++++++++

Malware is any kind of computer software with malicious intent.
    • Spying on target
        ◦ RATs
        ◦ Key-loggers
          
    • Data ex-filtration: This is unauthorized transfer of data from a computer.
    • Data encryption and destruction
        ◦ Ransomware

Types of malware:
    • Trojans: Disguises itself as a legitimate application to do malicious activity (data ex filtration and spying e.g. Emotet)
    • RATs: This software allows an attacker to remotely access and execute commands on the system.
    • Ransomware: Software that encrypts all files on the system and holds data for ransom.
    • Dropper: Software that downloads and drop additional malware
    • File-less Malware: Makes changes to files that are native to the OS (Astaroth)



Malware analysis:
    • Extracting as much information as possible from a malicious software.
    • The information aids in understanding: 
        ◦ Functionality of the malware.
        ◦ How the system was infected (e.g. is it a phishing attack)
        ◦ How the malware communicates with the attacker
        ◦ How to defend against similar attacks by ex-filtrating useful indicators e.g. registry, URLs, keys and file names to generate signatures useful for future detection.



Types of Malware Analysis:
    • Static Analysis: Analysis without executing/running the malware (Extract strings, PE headers)
      
    • Dynamic Analysis: Analysis by executing/running to understand what the malware does during execution (Done in a debugger)
      
    • Code Analysis: Reverse engineering assembly code (Both Static and Dynamic) 
      
    • Behavioral Analysis:This is monitoring the malware after execution. To fully understand how the malware works. (Process monitoring, network monitoring, registry entry monitoring)



------------------------------------------------------------------------------------------------------------------------


Flare VM: Malware analysis tool.


+++++++++++++++++++++++++++++++++
2. Setting up a Sandbox Environment:
+++++++++++++++++++++++++++++++++


------------------------------------------------------------------------------------------------------------------------


++++++++++++++++++++
3. Static Analysis:
++++++++++++++++++++

Analyze malware without executing it, aim is to extract useful information.

    1. Identify the file type:- Target OS, architecture and format(e.g. dll or exe)
       
    2. Identify the malware:- Generating a hash of the malware this gives the malware a unique identifier; using the hash to see if anyone else has analyzed the malware(disclosure site may reveal the identity of the malware). Check if the malware will change after execution in dynamic analysis.
       
    3. Strings:- Shows us how the malware sets up persistence, the CNC it connects to
       
    4. Packing and Obfuscation:- Unpacking and de-obfuscating the application to reveal the malware source code.
       
    5. PE Headers:- Portable executable file format used by windows, the data structure contains information neccessary to manage the wrapped executable code.


++++++++++++++++++++++++++
Identify the file type:- 
++++++++++++++++++++++++++

Helps identify the target OS and corresponding architecture.
    Windsows executable eg. PE (In the form of <.exe or .dll>)

The file signature exists in the file Header (Represented in hexadecimal values in the first two bytes)

NB:->
Attacker may use packing and obfuscation to avoid signature based identification.

Tools to Use:->
-> HxD - Hex Editor to allow us o view the PE header to check the file signature.
    Is the file executable (MZ first 2 bytes)

-> Exeinfo PE - Retreives windows PE header information, also detects if executable has been packed and detects packer version and how to unpack.
    
-> Pestudio - Flare vm
    First bytes in hexadecimal 
    First bytes in plain text
    File type (e.g. dll)
    cpu (32 bit or 64 bit)
    The hash of the malware
    
-> CFF explorer - Flare VM



++++++++++++++++++++++++++
Identify the malware:- 
++++++++++++++++++++++++++

Malware Hashing:- Generating crypto hashes for the file content of the target malware.
    MD5
    SHA-1
    SHA-256
    
Hashing gives us a fingerprint 

Why Hash the Malware:-
-> Rather than using the malware names, use hashes to uniquely identify malware.    

-> Hashes are used to identify malware on malware analysis sites (e.g. Virus Total, hybrid-analysis)
    Paste the hash generated from the tools onto (virustotal.com)
    
    
-> Can check for detecetd malware or check online if the malware has been analyzed by other researchers.


The tools for hashing malware:
-> HashMyFiles - Using this tool will give:
    The file name
    MD5 hash of the file
    SHA1 hash of the file
    CRC32 hash of the file
    SHA-256 hash of the file
    SHA-512 hash of the file

-> hashcalc



++++++++++++++++++++++++++
Strings Analysis:- 
++++++++++++++++++++++++++

Extracting readable characters and words from malware, some are useful others are not.

Strings are in ASCII and Unicode format (We specify the strings we want to extract, some tools only extract ASCII)

Types of strings to look for:
    File names
    URL's (Domains the malware connect to)
    IP addresses
    Registry keys

NB:
Attackers may include fake strings to disrupt the analysis.

Tools to use:
-> Strings Command Line utility
    
    In Powersehll type {strings} you will get ho to use the function
    To get the ascii (-a) and minimum string length (-n) 
        > strings -a -n 6 <directory to file> > <directory to save file>
    
    Data to be found:    
        Get URL's
        Methods like (POST) showing its communicating to the attacker
        Unicode strings: URL's to Social Platforms
        
-> Shell extensions
 
-> Pestudio
-> peid



++++++++++++++++++++++++++
Packing and Obfuscation:- 
++++++++++++++++++++++++++

 Packer is a tool that is used to compress the content of the malware
    Attackers compress an executable and when executed, the packed executable will be decompressed, this will allow analysis of unpacked executable.
    
 Attackers use packers to Obfuscate the malware content, making it difficult to analyze strings. Making some string unusable.
 
 How to detect an obfuscated malware is by using a tool like EXEinfo PE which gives the packer used and how to un-pack it 
 
 Tools to be used:
 
 -> UPX
    Can be  used to compress or decompress malware.
    Usign Powershell, type {upx} and get to see some commands for the function.
     
     To decompress use (upx -d)
        upx -d <file directory>
    
     To pack a file use ( upx -9<the compression level> -qvfk<the flag>  <add the file directory> ) 
 
 -> EXEinfo PE
 
 NB:
 The hashes of both the packed and unpacked malwares are different.



++++++++++++++++++++++++++
PE Headers:- 
++++++++++++++++++++++++++

Contains all the info required by the OS to run the executable

This info gives us an idea of the functionality of the malware.

Its importance:
    Contains info of what is required by OS to execute the executable
    Contains info of where the executable needs to be loaded in memory
    Contains the Libraries needed by the executable so as to be loaded (dll)
    Contains info of where the execution begins.

PE Header Structure:

MZ Header/DOS Header
DOS Stub
PE File Header
Image Optional

